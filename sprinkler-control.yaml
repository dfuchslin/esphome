# inspo: https://community.home-assistant.io/t/sprinkler-automation-with-esphome-a-complete-project/565077

# relay 0 (main)  D7
# relay 1         D6      (greenhouse/gravel garden)
# relay 2         D5      (greenhouse/gravel garden)
# relay 3         GPIO9   (hedge/rose garden)
# relay 4         GPIO10  (hedge/rose garden)
# relay 5         D2
# relay 6         D1      (front altan)
# relay 7         D0

substitutions:
  zone_master_name: "Main"
  zone_master_gpio: "D7"
  zone_1_name: "Hedge"
  zone_1_gpio: "GPIO9"
  zone_1_duration: "90"
  zone_2_name: "Gazebo"
  zone_2_gpio: "D5"
  zone_2_duration: "30"
  zone_3_name: "Gravel Garden"
  zone_3_gpio: "D6"
  zone_3_duration: "30"

esphome:
  name: sprinkler-control
  friendly_name: sprinkler-control
  on_boot:
    priority: -100
    then:
      - text_sensor.template.publish:
          id: valve_status
          state: "Idle"
      - sprinkler.set_multiplier:
          id: sprinkler_controller_id
          multiplier: 60

esp8266:
  board: nodemcuv2
  framework:
    version: recommended
  early_pin_init: false

logger:
#  level: VERY_VERBOSE

api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  # esp32 needs the output_power setting, see https://github.com/espressif/arduino-esp32/issues/2144#issuecomment-2028949116
  output_power: 8.5dB

web_server:
  port: 80

prometheus:

sensor:
  - platform: uptime
    name: Uptime

  - platform: wifi_signal
    name: WiFi Signal
    update_interval: 60s

switch:
  - platform: restart
    name: "Restart"

  - platform: gpio
    id: switch_valve_main
    name: "$zone_master_name valve"
    pin: $zone_master_gpio
    inverted: true
    internal: true
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    id: switch_valve_zone_1
    name: "$zone_1_name valve"
    pin: $zone_1_gpio
    inverted: true
    internal: true
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    id: switch_valve_zone_2
    name: "$zone_2_name valve"
    pin: $zone_2_gpio
    inverted: true
    internal: true
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    id: switch_valve_zone_3
    name: "$zone_3_name valve"
    pin: $zone_3_gpio
    inverted: true
    internal: true
    restore_mode: RESTORE_DEFAULT_OFF

sprinkler:
  - id: sprinkler_controller_id
    main_switch:
      name: "Main"
      id: switch_valve_main_sprinkler
    auto_advance_switch: "Auto Advance"
    valve_open_delay: 1s
    valves:
      - valve_switch: $zone_1_name
        run_duration: "${zone_1_duration}s"
        valve_switch_id: switch_valve_zone_1
        pump_switch_id: switch_valve_main
      - valve_switch: $zone_2_name
        run_duration: "${zone_2_duration}s"
        valve_switch_id: switch_valve_zone_2
        pump_switch_id: switch_valve_main
      - valve_switch: $zone_3_name
        run_duration: "${zone_3_duration}s"
        valve_switch_id: switch_valve_zone_3
        pump_switch_id: switch_valve_main

number:
  - platform: template
    id: num_switch_valve_zone_1
    name: "$zone_1_name duration"
    min_value: 1
    max_value: 120
    step: 1
    unit_of_measurement: Min
    icon: "mdi:timer-outline"
    mode: box
    lambda: "return id(sprinkler_controller_id).valve_run_duration(0);"
    set_action:
      - sprinkler.set_valve_run_duration:
          id: sprinkler_controller_id
          valve_number: 0
          run_duration: !lambda 'return x;'
  - platform: template
    id: num_switch_valve_zone_2
    name: "$zone_2_name duration"
    min_value: 1
    max_value: 120
    step: 1
    unit_of_measurement: Min
    icon: "mdi:timer-outline"
    mode: box
    lambda: "return id(sprinkler_controller_id).valve_run_duration(1);"
    set_action:
      - sprinkler.set_valve_run_duration:
          id: sprinkler_controller_id
          valve_number: 1
          run_duration: !lambda 'return x;'
  - platform: template
    id: num_switch_valve_zone_3
    name: "$zone_3_name duration"
    min_value: 1
    max_value: 120
    step: 1
    unit_of_measurement: Min
    icon: "mdi:timer-outline"
    mode: box
    lambda: "return id(sprinkler_controller_id).valve_run_duration(2);"
    set_action:
      - sprinkler.set_valve_run_duration:
          id: sprinkler_controller_id
          valve_number: 2
          run_duration: !lambda 'return x;'

text_sensor:
  - platform: template
    id: time_remaining
    name: Time Remaining
    update_interval: 1s
    icon: "mdi:timer-sand"
    lambda: |-
      int seconds = round(id(sprinkler_controller_id).time_remaining_active_valve().value_or(0));
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
        return {
          ((days ? String(days) + "d " : "") + 
          (hours ? String(hours) + "h " : "") +
          (minutes ? String(minutes) + "m " : "") +
          (String(seconds) + "s")).c_str()};


  - platform: template
    id: progress_percent
    name: Progress %
    update_interval: 1s
    icon: "mdi:progress-clock"
    lambda: |-
      int progress_percent = round(((id(sprinkler_controller_id).valve_run_duration_adjusted(id(sprinkler_controller_id).active_valve().value_or(0)) - id(sprinkler_controller_id).time_remaining_active_valve().value_or(0)) * 100 / id(sprinkler_controller_id).valve_run_duration_adjusted(id(sprinkler_controller_id).active_valve().value_or(0))));
      std::string progress_percent_as_string = std::to_string(progress_percent);
      return progress_percent_as_string +"%";

  - platform: template
    id: valve_status
    name: Status
    update_interval: never
    icon: "mdi:information-variant"
