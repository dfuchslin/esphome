# thank you https://www.printables.com/model/1167457-1u-rack-mount-wopr-leds-enclosure

esphome:
  name: wopr
  friendly_name: WOPR Display

# https://community.home-assistant.io/t/esp32-s3-devkitc-1-n16r8-using-psram-howto/652601/8
psram:
  mode: octal
  speed: 80MHz

esp32:
  board: seeed_xiao_esp32s3
  framework:
    type: esp-idf

logger:
  level: WARN

api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  output_power: 8.5dB

web_server:
  port: 80

prometheus:

sensor:
  - platform: uptime
    name: Uptime

  - platform: wifi_signal
    name: WiFi Signal
    update_interval: 60s

status_led:
  pin:
    number: GPIO21  # LED_BUILTIN
    inverted: true

spi:
  clk_pin: GPIO2
  mosi_pin: GPIO3

display:
  - platform: max7219digit
    id: max7219_display
    data_rate: 10MHz
    cs_pin: GPIO4
    num_chips: 12
    intensity: 0
    update_interval: 100ms
    lambda: |-
      struct PixelInfo {
        uint8_t value;  // Bit field for 8 rows (0 or 1)
        uint32_t next_update_times[8];  // Next update time for each row in this column
      };

      static uint32_t last_update = 0;
      static bool first_run = true;

      static PixelInfo buffer[96] = {0};  // 12 chips * 8 columns

      if (first_run) {
        ESP_LOGI("WOPR", "Initializing WOPR display pattern generator");
        last_update = 0;

        // Initialize all pixels with 0 value and random update times
        for (int x = 0; x < 96; x++) {
          buffer[x].value = 0;
          for (int y = 0; y < 8; y++) {
            // Random time between 0 and 2000ms
            buffer[x].next_update_times[y] = random() % 2000;
          }
        }

        first_run = false;
      }

      uint32_t now = millis();

      // Check each pixel for updates
      int changed_pixels = 0;
      int on_pixels = 0;

      for (int x = 0; x < 96; x++) {
        for (int y = 0; y < 8; y++) {
          // Check if this pixel is due for an update
          if (now >= buffer[x].next_update_times[y]) {
            // 50% chance to change the pixel
            if (((double) random()/RAND_MAX) < 0.5) {
              changed_pixels++;

              // Get current state
              bool current_state = (buffer[x].value & (1 << y)) != 0;

              // 50% chance to set or clear
              if (((double) random()/RAND_MAX) < 0.5) {
                buffer[x].value |= (1 << y);  // Set bit
                if (!current_state) {  // Only count if state changed
                  on_pixels++;
                }
              } else {
                buffer[x].value &= ~(1 << y);  // Clear bit
              }
            }

            // Set next update time (random between 0 and 2 seconds)
            uint32_t next_update_delay = (uint32_t)(((double) random()/RAND_MAX) * 2000);
            buffer[x].next_update_times[y] = now + next_update_delay;
          }
        }
      }

      if (changed_pixels > 0) {
        ESP_LOGD("WOPR", "Changed %d pixels, %d turned on", changed_pixels, on_pixels);
      }

      last_update = now;

      for (int y = 0; y < 8; y++) {
        for (int x = 0; x < 96; x++) {
          if (buffer[x].value & (1 << y)) {
            id(max7219_display).draw_pixel_at(x, y, COLOR_ON);
          }
        }
      }

      id(max7219_display).display();
